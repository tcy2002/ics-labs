                            | #######################################################################
                            | # Test for copying block of size 63;
                            | #######################################################################
0x000:                      | 	.pos 0
0x000: 30f44808000000000000 | main:	irmovq Stack, %rsp  	# Set up stack pointer
                            | 
                            | 	# Set up arguments for copy function and then invoke it
0x00a: 30f23f00000000000000 | 	irmovq $63, %rdx		# src and dst have 63 elements
0x014: 30f6c805000000000000 | 	irmovq dest, %rsi	# dst array
0x01e: 30f7b803000000000000 | 	irmovq src, %rdi	# src array
0x028: 803200000000000000   | 	call ncopy		 
0x031: 00                   | 	halt			# should halt with num nonzeros in %rax
0x032:                      | StartFun:
                            | #/* $begin ncopy-ys */
                            | ##################################################################
                            | # ncopy.ys - Copy a src block of len words to dst.
                            | # Return the number of positive words (>0) contained in src.
                            | #
                            | # Include your name and ID here.
                            | # Tong Chuyan 520021910934
                            | #
                            | # Describe how and why you modified the baseline code.
                            | # 1. Loop unrolling: the main loop is unrolled to 9 pieces(label loopN).
                            | #    when the remainder is greater than or equal to 9, the loop 
                            | #    continues, otherwise each remainder case is dealt with separately. 
                            | #    I tried 8, 9 and 10 unrolling lengths, and finally confirmed 
                            | #    10 has the lowest CPE and is also within the 1000 bytes limit.
                            | #
                            | # 2. Jump tree for remains: the code snippet followed label JumpTree
                            | #    is designed to jump to different PC for different remainder
                            | #    cases(label FootN). The structure of the tree is the result of
                            | #    serious consideration to attain the highest prediction efficiency.
                            | #    Jump tree structure:
                            | #                              1
                            | #                            ↙   ↘
                            | #                          0       5
                            | #                                ↙   ↘
                            | #                              ↙       ↘
                            | #                            3           7
                            | #                          ↙   ↘       ↙   ↘
                            | #                        2       4   6       8
                            | #    Given that the first test case greatly affects the average, 
                            | #    1 is put on the root.
                            | #
                            | # 3. Avoid load/use hazard: in the main loop, three pieces of 
                            | #    unrolled circle are integrated, so that the mrmovq and rmmovq
                            | #    instructions are not adjacent. In the remains part, two pieces 
                            | #    can't be combined due to the independence of each jump, so the 
                            | #    add operation in one piece is inserted between mrmovq and 
                            | #    rmmovq in the last piece, which acts the same role, but the 
                            | #    first load/use hazard is inevitable.
                            | #
                            | # 4. Other optimizations: useless instructions and unnecessary jmps 
                            | #    are avoided, such as xorq %rax, %rax and jmp Done. the remains
                            | #    part is put after the main loop to avoid additional jmp and ret.
                            | #
                            | ##################################################################
                            | # Do not modify this portion
                            | # Function prologue.
                            | # %rdi = src, %rsi = dst, %rdx = len
0x032:                      | ncopy:
                            | 
                            | ##################################################################
                            | # You can modify this portion
                            | 	# Loop header
0x032: c0f2f7ffffffffffffff | 	iaddq $-9, %rdx
0x03c: 72dd01000000000000   | 	jl JumpTree
                            | 
0x045:                      | Loop0:
0x045: 50a74000000000000000 | 	mrmovq 64(%rdi), %r10
0x04f: 50b73800000000000000 | 	mrmovq 56(%rdi), %r11
0x059: 50c73000000000000000 | 	mrmovq 48(%rdi), %r12
0x063: 62aa                 | 	andq %r10, %r10
0x065: 717800000000000000   | 	jle Loop1
0x06e: c0f00100000000000000 | 	iaddq $1, %rax
0x078: 40a64000000000000000 | Loop1:	rmmovq %r10, 64(%rsi)
0x082: 62bb                 | 	andq %r11, %r11
0x084: 719700000000000000   | 	jle Loop2
0x08d: c0f00100000000000000 | 	iaddq $1, %rax
0x097: 40b63800000000000000 | Loop2:	rmmovq %r11, 56(%rsi)
0x0a1: 62cc                 | 	andq %r12, %r12
0x0a3: 71b600000000000000   | 	jle Loop3
0x0ac: c0f00100000000000000 | 	iaddq $1, %rax
0x0b6: 40c63000000000000000 | Loop3:	rmmovq %r12, 48(%rsi)
                            | 
0x0c0: 50a72800000000000000 | 	mrmovq 40(%rdi), %r10
0x0ca: 50b72000000000000000 | 	mrmovq 32(%rdi), %r11
0x0d4: 50c71800000000000000 | 	mrmovq 24(%rdi), %r12
0x0de: 62aa                 | 	andq %r10, %r10
0x0e0: 71f300000000000000   | 	jle Loop4
0x0e9: c0f00100000000000000 | 	iaddq $1, %rax
0x0f3: 40a62800000000000000 | Loop4:	rmmovq %r10, 40(%rsi)
0x0fd: 62bb                 | 	andq %r11, %r11
0x0ff: 711201000000000000   | 	jle Loop5
0x108: c0f00100000000000000 | 	iaddq $1, %rax
0x112: 40b62000000000000000 | Loop5:	rmmovq %r11, 32(%rsi)
0x11c: 62cc                 | 	andq %r12, %r12
0x11e: 713101000000000000   | 	jle Loop6
0x127: c0f00100000000000000 | 	iaddq $1, %rax
0x131: 40c61800000000000000 | Loop6:	rmmovq %r12, 24(%rsi)
                            | 
0x13b: 50a71000000000000000 | 	mrmovq 16(%rdi), %r10
0x145: 50b70800000000000000 | 	mrmovq 8(%rdi), %r11
0x14f: 50c70000000000000000 | 	mrmovq (%rdi), %r12
0x159: 62aa                 | 	andq %r10, %r10
0x15b: 716e01000000000000   | 	jle Loop7
0x164: c0f00100000000000000 | 	iaddq $1, %rax
0x16e: 40a61000000000000000 | Loop7:	rmmovq %r10, 16(%rsi)
0x178: 62bb                 | 	andq %r11, %r11
0x17a: 718d01000000000000   | 	jle Loop8
0x183: c0f00100000000000000 | 	iaddq $1, %rax
0x18d: 40b60800000000000000 | Loop8:	rmmovq %r11, 8(%rsi)
0x197: 62cc                 | 	andq %r12, %r12
0x199: 71ac01000000000000   | 	jle Loop9
0x1a2: c0f00100000000000000 | 	iaddq $1, %rax
0x1ac: 40c60000000000000000 | Loop9:	rmmovq %r12, (%rsi)
                            | 
0x1b6: c0f74800000000000000 | 	iaddq $72, %rdi
0x1c0: c0f64800000000000000 | 	iaddq $72, %rsi
0x1ca: c0f2f7ffffffffffffff | 	iaddq $-9, %rdx
0x1d4: 754500000000000000   | 	jge Loop0
                            | 	
0x1dd:                      | JumpTree:
0x1dd: c0f20800000000000000 | 	iaddq $8, %rdx
0x1e7: 76fa01000000000000   | 	jg T1
0x1f0: 737603000000000000   | 	je Foot8
0x1f9: 90                   | 	ret
0x1fa: c0f2fcffffffffffffff | T1:	iaddq $-4, %rdx
0x204: 721f02000000000000   | 	jl T11
0x20d: 764e02000000000000   | 	jg T12
0x216: 70d202000000000000   | 	jmp Foot4
0x21f: c0f20200000000000000 | T11:	iaddq $2, %rdx
0x229: 724d03000000000000   | 	jl Foot7
0x232: 732403000000000000   | 	je Foot6
0x23b: c0f2ffffffffffffffff | 	iaddq $-1, %rdx
0x245: 70fb02000000000000   | 	jmp Foot5
0x24e: c0f2feffffffffffffff | T12:	iaddq $-2, %rdx
0x258: 72a902000000000000   | 	jl Foot3
0x261: 738002000000000000   | 	je Foot2
                            | 
0x26a:                      | Foot1:	
0x26a: 50a73800000000000000 | 	mrmovq 56(%rdi), %r10
0x274: 40a63800000000000000 | 	rmmovq %r10, 56(%rsi)
0x27e: 62aa                 | 	andq %r10, %r10
0x280:                      | Foot2:
0x280: 50a73000000000000000 | 	mrmovq 48(%rdi), %r10
0x28a: 719d02000000000000   | 	jle P3
0x293: c0f00100000000000000 | 	iaddq $1, %rax
0x29d: 40a63000000000000000 | P3:	rmmovq %r10, 48(%rsi)
0x2a7: 62aa                 | 	andq %r10, %r10
0x2a9:                      | Foot3:
0x2a9: 50a72800000000000000 | 	mrmovq 40(%rdi), %r10
0x2b3: 71c602000000000000   | 	jle P4 
0x2bc: c0f00100000000000000 | 	iaddq $1, %rax
0x2c6: 40a62800000000000000 | P4:	rmmovq %r10, 40(%rsi)	
0x2d0: 62aa                 | 	andq %r10, %r10
0x2d2:                      | Foot4:
0x2d2: 50a72000000000000000 | 	mrmovq 32(%rdi), %r10
0x2dc: 71ef02000000000000   | 	jle P5
0x2e5: c0f00100000000000000 | 	iaddq $1, %rax
0x2ef: 40a62000000000000000 | P5:	rmmovq %r10, 32(%rsi)
0x2f9: 62aa                 | 	andq %r10, %r10
0x2fb:                      | Foot5:
0x2fb: 50a71800000000000000 | 	mrmovq 24(%rdi), %r10
0x305: 711803000000000000   | 	jle P6
0x30e: c0f00100000000000000 | 	iaddq $1, %rax
0x318: 40a61800000000000000 | P6:	rmmovq %r10, 24(%rsi)
0x322: 62aa                 | 	andq %r10, %r10
0x324:                      | Foot6:
0x324: 50a71000000000000000 | 	mrmovq 16(%rdi), %r10
0x32e: 714103000000000000   | 	jle P7
0x337: c0f00100000000000000 | 	iaddq $1, %rax
0x341: 40a61000000000000000 | P7:	rmmovq %r10, 16(%rsi)
0x34b: 62aa                 | 	andq %r10, %r10
0x34d:                      | Foot7:
0x34d: 50a70800000000000000 | 	mrmovq 8(%rdi), %r10
0x357: 716a03000000000000   | 	jle P8
0x360: c0f00100000000000000 | 	iaddq $1, %rax
0x36a: 40a60800000000000000 | P8:	rmmovq %r10, 8(%rsi)	
0x374: 62aa                 | 	andq %r10, %r10
0x376:                      | Foot8:
0x376: 50a70000000000000000 | 	mrmovq (%rdi), %r10
0x380: 719303000000000000   | 	jle P9
0x389: c0f00100000000000000 | 	iaddq $1, %rax
0x393: 40a60000000000000000 | P9:	rmmovq %r10, (%rsi)		
0x39d: 62aa                 | 	andq %r10, %r10
0x39f: 71b203000000000000   | 	jle Done
0x3a8: c0f00100000000000000 | 	iaddq $1, %rax
                            | ##################################################################
                            | # Do not modify the following section of code
                            | # Function epilogue.
0x3b2:                      | Done:
0x3b2: 90                   | 	ret
                            | ##################################################################
                            | # Keep the following label at the end of your function
0x3b3:                      | End:
                            | #/* $end ncopy-ys */
0x3b3:                      | EndFun:
                            | 
                            | ###############################
                            | # Source and destination blocks 
                            | ###############################
0x3b8:                      | 	.align 8
0x3b8:                      | src:
0x3b8: 0100000000000000     | 	.quad 1
0x3c0: feffffffffffffff     | 	.quad -2
0x3c8: fdffffffffffffff     | 	.quad -3
0x3d0: fcffffffffffffff     | 	.quad -4
0x3d8: 0500000000000000     | 	.quad 5
0x3e0: 0600000000000000     | 	.quad 6
0x3e8: f9ffffffffffffff     | 	.quad -7
0x3f0: 0800000000000000     | 	.quad 8
0x3f8: f7ffffffffffffff     | 	.quad -9
0x400: f6ffffffffffffff     | 	.quad -10
0x408: 0b00000000000000     | 	.quad 11
0x410: f4ffffffffffffff     | 	.quad -12
0x418: 0d00000000000000     | 	.quad 13
0x420: 0e00000000000000     | 	.quad 14
0x428: f1ffffffffffffff     | 	.quad -15
0x430: f0ffffffffffffff     | 	.quad -16
0x438: 1100000000000000     | 	.quad 17
0x440: 1200000000000000     | 	.quad 18
0x448: edffffffffffffff     | 	.quad -19
0x450: ecffffffffffffff     | 	.quad -20
0x458: 1500000000000000     | 	.quad 21
0x460: eaffffffffffffff     | 	.quad -22
0x468: e9ffffffffffffff     | 	.quad -23
0x470: 1800000000000000     | 	.quad 24
0x478: 1900000000000000     | 	.quad 25
0x480: e6ffffffffffffff     | 	.quad -26
0x488: 1b00000000000000     | 	.quad 27
0x490: e4ffffffffffffff     | 	.quad -28
0x498: 1d00000000000000     | 	.quad 29
0x4a0: 1e00000000000000     | 	.quad 30
0x4a8: e1ffffffffffffff     | 	.quad -31
0x4b0: e0ffffffffffffff     | 	.quad -32
0x4b8: 2100000000000000     | 	.quad 33
0x4c0: deffffffffffffff     | 	.quad -34
0x4c8: 2300000000000000     | 	.quad 35
0x4d0: 2400000000000000     | 	.quad 36
0x4d8: 2500000000000000     | 	.quad 37
0x4e0: daffffffffffffff     | 	.quad -38
0x4e8: d9ffffffffffffff     | 	.quad -39
0x4f0: 2800000000000000     | 	.quad 40
0x4f8: 2900000000000000     | 	.quad 41
0x500: 2a00000000000000     | 	.quad 42
0x508: d5ffffffffffffff     | 	.quad -43
0x510: 2c00000000000000     | 	.quad 44
0x518: 2d00000000000000     | 	.quad 45
0x520: d2ffffffffffffff     | 	.quad -46
0x528: d1ffffffffffffff     | 	.quad -47
0x530: 3000000000000000     | 	.quad 48
0x538: 3100000000000000     | 	.quad 49
0x540: 3200000000000000     | 	.quad 50
0x548: 3300000000000000     | 	.quad 51
0x550: ccffffffffffffff     | 	.quad -52
0x558: cbffffffffffffff     | 	.quad -53
0x560: 3600000000000000     | 	.quad 54
0x568: c9ffffffffffffff     | 	.quad -55
0x570: c8ffffffffffffff     | 	.quad -56
0x578: c7ffffffffffffff     | 	.quad -57
0x580: 3a00000000000000     | 	.quad 58
0x588: c5ffffffffffffff     | 	.quad -59
0x590: c4ffffffffffffff     | 	.quad -60
0x598: 3d00000000000000     | 	.quad 61
0x5a0: c2ffffffffffffff     | 	.quad -62
0x5a8: c1ffffffffffffff     | 	.quad -63
0x5b0: fadebc0000000000     | 	.quad 0xbcdefa # This shouldn't get moved
                            | 
0x5c0:                      | 	.align 16
0x5c0:                      | Predest:
0x5c0: fadebc0000000000     | 	.quad 0xbcdefa
0x5c8:                      | dest:
0x5c8: abefcd0000000000     | 	.quad 0xcdefab
0x5d0: abefcd0000000000     | 	.quad 0xcdefab
0x5d8: abefcd0000000000     | 	.quad 0xcdefab
0x5e0: abefcd0000000000     | 	.quad 0xcdefab
0x5e8: abefcd0000000000     | 	.quad 0xcdefab
0x5f0: abefcd0000000000     | 	.quad 0xcdefab
0x5f8: abefcd0000000000     | 	.quad 0xcdefab
0x600: abefcd0000000000     | 	.quad 0xcdefab
0x608: abefcd0000000000     | 	.quad 0xcdefab
0x610: abefcd0000000000     | 	.quad 0xcdefab
0x618: abefcd0000000000     | 	.quad 0xcdefab
0x620: abefcd0000000000     | 	.quad 0xcdefab
0x628: abefcd0000000000     | 	.quad 0xcdefab
0x630: abefcd0000000000     | 	.quad 0xcdefab
0x638: abefcd0000000000     | 	.quad 0xcdefab
0x640: abefcd0000000000     | 	.quad 0xcdefab
0x648: abefcd0000000000     | 	.quad 0xcdefab
0x650: abefcd0000000000     | 	.quad 0xcdefab
0x658: abefcd0000000000     | 	.quad 0xcdefab
0x660: abefcd0000000000     | 	.quad 0xcdefab
0x668: abefcd0000000000     | 	.quad 0xcdefab
0x670: abefcd0000000000     | 	.quad 0xcdefab
0x678: abefcd0000000000     | 	.quad 0xcdefab
0x680: abefcd0000000000     | 	.quad 0xcdefab
0x688: abefcd0000000000     | 	.quad 0xcdefab
0x690: abefcd0000000000     | 	.quad 0xcdefab
0x698: abefcd0000000000     | 	.quad 0xcdefab
0x6a0: abefcd0000000000     | 	.quad 0xcdefab
0x6a8: abefcd0000000000     | 	.quad 0xcdefab
0x6b0: abefcd0000000000     | 	.quad 0xcdefab
0x6b8: abefcd0000000000     | 	.quad 0xcdefab
0x6c0: abefcd0000000000     | 	.quad 0xcdefab
0x6c8: abefcd0000000000     | 	.quad 0xcdefab
0x6d0: abefcd0000000000     | 	.quad 0xcdefab
0x6d8: abefcd0000000000     | 	.quad 0xcdefab
0x6e0: abefcd0000000000     | 	.quad 0xcdefab
0x6e8: abefcd0000000000     | 	.quad 0xcdefab
0x6f0: abefcd0000000000     | 	.quad 0xcdefab
0x6f8: abefcd0000000000     | 	.quad 0xcdefab
0x700: abefcd0000000000     | 	.quad 0xcdefab
0x708: abefcd0000000000     | 	.quad 0xcdefab
0x710: abefcd0000000000     | 	.quad 0xcdefab
0x718: abefcd0000000000     | 	.quad 0xcdefab
0x720: abefcd0000000000     | 	.quad 0xcdefab
0x728: abefcd0000000000     | 	.quad 0xcdefab
0x730: abefcd0000000000     | 	.quad 0xcdefab
0x738: abefcd0000000000     | 	.quad 0xcdefab
0x740: abefcd0000000000     | 	.quad 0xcdefab
0x748: abefcd0000000000     | 	.quad 0xcdefab
0x750: abefcd0000000000     | 	.quad 0xcdefab
0x758: abefcd0000000000     | 	.quad 0xcdefab
0x760: abefcd0000000000     | 	.quad 0xcdefab
0x768: abefcd0000000000     | 	.quad 0xcdefab
0x770: abefcd0000000000     | 	.quad 0xcdefab
0x778: abefcd0000000000     | 	.quad 0xcdefab
0x780: abefcd0000000000     | 	.quad 0xcdefab
0x788: abefcd0000000000     | 	.quad 0xcdefab
0x790: abefcd0000000000     | 	.quad 0xcdefab
0x798: abefcd0000000000     | 	.quad 0xcdefab
0x7a0: abefcd0000000000     | 	.quad 0xcdefab
0x7a8: abefcd0000000000     | 	.quad 0xcdefab
0x7b0: abefcd0000000000     | 	.quad 0xcdefab
0x7b8: abefcd0000000000     | 	.quad 0xcdefab
0x7c0:                      | Postdest:
0x7c0: bcfade0000000000     | 	.quad 0xdefabc
                            | 
0x7c8:                      | .align 8
                            | # Run time stack
0x7c8: 0000000000000000     | 	.quad 0
0x7d0: 0000000000000000     | 	.quad 0
0x7d8: 0000000000000000     | 	.quad 0
0x7e0: 0000000000000000     | 	.quad 0
0x7e8: 0000000000000000     | 	.quad 0
0x7f0: 0000000000000000     | 	.quad 0
0x7f8: 0000000000000000     | 	.quad 0
0x800: 0000000000000000     | 	.quad 0
0x808: 0000000000000000     | 	.quad 0
0x810: 0000000000000000     | 	.quad 0
0x818: 0000000000000000     | 	.quad 0
0x820: 0000000000000000     | 	.quad 0
0x828: 0000000000000000     | 	.quad 0
0x830: 0000000000000000     | 	.quad 0
0x838: 0000000000000000     | 	.quad 0
0x840: 0000000000000000     | 	.quad 0
                            | 
0x848:                      | Stack:
