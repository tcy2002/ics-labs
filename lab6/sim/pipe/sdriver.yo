                            | #######################################################################
                            | # Test for copying block of size 4;
                            | #######################################################################
0x000:                      | 	.pos 0
0x000: 30f49004000000000000 | main:	irmovq Stack, %rsp  	# Set up stack pointer
                            | 
                            | 	# Set up arguments for copy function and then invoke it
0x00a: 30f20400000000000000 | 	irmovq $4, %rdx		# src and dst have 4 elements
0x014: 30f6e803000000000000 | 	irmovq dest, %rsi	# dst array
0x01e: 30f7b803000000000000 | 	irmovq src, %rdi	# src array
0x028: 803200000000000000   | 	call ncopy		 
0x031: 00                   | 	halt			# should halt with num nonzeros in %rax
0x032:                      | StartFun:
                            | #/* $begin ncopy-ys */
                            | ##################################################################
                            | # ncopy.ys - Copy a src block of len words to dst.
                            | # Return the number of positive words (>0) contained in src.
                            | #
                            | # Include your name and ID here.
                            | # Tong Chuyan 520021910934
                            | #
                            | # Describe how and why you modified the baseline code.
                            | # 1. Loop unrolling: the main loop is unrolled to 9 pieces(label loopN).
                            | #    when the remainder is greater than or equal to 9, the loop 
                            | #    continues, otherwise each remainder case is dealt with separately. 
                            | #    I tried 8, 9 and 10 unrolling lengths, and finally confirmed 
                            | #    10 has the lowest CPE and is also within the 1000 bytes limit.
                            | #
                            | # 2. Jump tree for remains: the code snippet followed label JumpTree
                            | #    is designed to jump to different PC for different remainder
                            | #    cases(label FootN). The structure of the tree is the result of
                            | #    serious consideration to attain the highest prediction efficiency.
                            | #    Jump tree structure:
                            | #                              1
                            | #                            ↙   ↘
                            | #                          0       5
                            | #                                ↙   ↘
                            | #                              ↙       ↘
                            | #                            3           7
                            | #                          ↙   ↘       ↙   ↘
                            | #                        2       4   6       8
                            | #    Given that the first test case greatly affects the average, 
                            | #    1 is put on the root.
                            | #
                            | # 3. Avoid load/use hazard: in the main loop, three pieces of 
                            | #    unrolled circle are integrated, so that the mrmovq and rmmovq
                            | #    instructions are not adjacent. In the remains part, two pieces 
                            | #    can't be combined due to the independence of each jump, so the 
                            | #    add operation in one piece is inserted between mrmovq and 
                            | #    rmmovq in the last piece, which acts the same role, but the 
                            | #    first load/use hazard is inevitable.
                            | #
                            | # 4. Other optimizations: useless instructions and unnecessary jmps 
                            | #    are avoided, such as xorq %rax, %rax and jmp Done. the remains
                            | #    part is put after the main loop to avoid additional jmp and ret.
                            | #
                            | ##################################################################
                            | # Do not modify this portion
                            | # Function prologue.
                            | # %rdi = src, %rsi = dst, %rdx = len
0x032:                      | ncopy:
                            | 
                            | ##################################################################
                            | # You can modify this portion
                            | 	# Loop header
0x032: c0f2f7ffffffffffffff | 	iaddq $-9, %rdx
0x03c: 72dd01000000000000   | 	jl JumpTree
                            | 
0x045:                      | Loop0:
0x045: 50a74000000000000000 | 	mrmovq 64(%rdi), %r10
0x04f: 50b73800000000000000 | 	mrmovq 56(%rdi), %r11
0x059: 50c73000000000000000 | 	mrmovq 48(%rdi), %r12
0x063: 62aa                 | 	andq %r10, %r10
0x065: 717800000000000000   | 	jle Loop1
0x06e: c0f00100000000000000 | 	iaddq $1, %rax
0x078: 40a64000000000000000 | Loop1:	rmmovq %r10, 64(%rsi)
0x082: 62bb                 | 	andq %r11, %r11
0x084: 719700000000000000   | 	jle Loop2
0x08d: c0f00100000000000000 | 	iaddq $1, %rax
0x097: 40b63800000000000000 | Loop2:	rmmovq %r11, 56(%rsi)
0x0a1: 62cc                 | 	andq %r12, %r12
0x0a3: 71b600000000000000   | 	jle Loop3
0x0ac: c0f00100000000000000 | 	iaddq $1, %rax
0x0b6: 40c63000000000000000 | Loop3:	rmmovq %r12, 48(%rsi)
                            | 
0x0c0: 50a72800000000000000 | 	mrmovq 40(%rdi), %r10
0x0ca: 50b72000000000000000 | 	mrmovq 32(%rdi), %r11
0x0d4: 50c71800000000000000 | 	mrmovq 24(%rdi), %r12
0x0de: 62aa                 | 	andq %r10, %r10
0x0e0: 71f300000000000000   | 	jle Loop4
0x0e9: c0f00100000000000000 | 	iaddq $1, %rax
0x0f3: 40a62800000000000000 | Loop4:	rmmovq %r10, 40(%rsi)
0x0fd: 62bb                 | 	andq %r11, %r11
0x0ff: 711201000000000000   | 	jle Loop5
0x108: c0f00100000000000000 | 	iaddq $1, %rax
0x112: 40b62000000000000000 | Loop5:	rmmovq %r11, 32(%rsi)
0x11c: 62cc                 | 	andq %r12, %r12
0x11e: 713101000000000000   | 	jle Loop6
0x127: c0f00100000000000000 | 	iaddq $1, %rax
0x131: 40c61800000000000000 | Loop6:	rmmovq %r12, 24(%rsi)
                            | 
0x13b: 50a71000000000000000 | 	mrmovq 16(%rdi), %r10
0x145: 50b70800000000000000 | 	mrmovq 8(%rdi), %r11
0x14f: 50c70000000000000000 | 	mrmovq (%rdi), %r12
0x159: 62aa                 | 	andq %r10, %r10
0x15b: 716e01000000000000   | 	jle Loop7
0x164: c0f00100000000000000 | 	iaddq $1, %rax
0x16e: 40a61000000000000000 | Loop7:	rmmovq %r10, 16(%rsi)
0x178: 62bb                 | 	andq %r11, %r11
0x17a: 718d01000000000000   | 	jle Loop8
0x183: c0f00100000000000000 | 	iaddq $1, %rax
0x18d: 40b60800000000000000 | Loop8:	rmmovq %r11, 8(%rsi)
0x197: 62cc                 | 	andq %r12, %r12
0x199: 71ac01000000000000   | 	jle Loop9
0x1a2: c0f00100000000000000 | 	iaddq $1, %rax
0x1ac: 40c60000000000000000 | Loop9:	rmmovq %r12, (%rsi)
                            | 
0x1b6: c0f74800000000000000 | 	iaddq $72, %rdi
0x1c0: c0f64800000000000000 | 	iaddq $72, %rsi
0x1ca: c0f2f7ffffffffffffff | 	iaddq $-9, %rdx
0x1d4: 754500000000000000   | 	jge Loop0
                            | 	
0x1dd:                      | JumpTree:
0x1dd: c0f20800000000000000 | 	iaddq $8, %rdx
0x1e7: 76fa01000000000000   | 	jg T1
0x1f0: 737603000000000000   | 	je Foot8
0x1f9: 90                   | 	ret
0x1fa: c0f2fcffffffffffffff | T1:	iaddq $-4, %rdx
0x204: 721f02000000000000   | 	jl T11
0x20d: 764e02000000000000   | 	jg T12
0x216: 70d202000000000000   | 	jmp Foot4
0x21f: c0f20200000000000000 | T11:	iaddq $2, %rdx
0x229: 724d03000000000000   | 	jl Foot7
0x232: 732403000000000000   | 	je Foot6
0x23b: c0f2ffffffffffffffff | 	iaddq $-1, %rdx
0x245: 70fb02000000000000   | 	jmp Foot5
0x24e: c0f2feffffffffffffff | T12:	iaddq $-2, %rdx
0x258: 72a902000000000000   | 	jl Foot3
0x261: 738002000000000000   | 	je Foot2
                            | 
0x26a:                      | Foot1:	
0x26a: 50a73800000000000000 | 	mrmovq 56(%rdi), %r10
0x274: 40a63800000000000000 | 	rmmovq %r10, 56(%rsi)
0x27e: 62aa                 | 	andq %r10, %r10
0x280:                      | Foot2:
0x280: 50a73000000000000000 | 	mrmovq 48(%rdi), %r10
0x28a: 719d02000000000000   | 	jle P3
0x293: c0f00100000000000000 | 	iaddq $1, %rax
0x29d: 40a63000000000000000 | P3:	rmmovq %r10, 48(%rsi)
0x2a7: 62aa                 | 	andq %r10, %r10
0x2a9:                      | Foot3:
0x2a9: 50a72800000000000000 | 	mrmovq 40(%rdi), %r10
0x2b3: 71c602000000000000   | 	jle P4 
0x2bc: c0f00100000000000000 | 	iaddq $1, %rax
0x2c6: 40a62800000000000000 | P4:	rmmovq %r10, 40(%rsi)	
0x2d0: 62aa                 | 	andq %r10, %r10
0x2d2:                      | Foot4:
0x2d2: 50a72000000000000000 | 	mrmovq 32(%rdi), %r10
0x2dc: 71ef02000000000000   | 	jle P5
0x2e5: c0f00100000000000000 | 	iaddq $1, %rax
0x2ef: 40a62000000000000000 | P5:	rmmovq %r10, 32(%rsi)
0x2f9: 62aa                 | 	andq %r10, %r10
0x2fb:                      | Foot5:
0x2fb: 50a71800000000000000 | 	mrmovq 24(%rdi), %r10
0x305: 711803000000000000   | 	jle P6
0x30e: c0f00100000000000000 | 	iaddq $1, %rax
0x318: 40a61800000000000000 | P6:	rmmovq %r10, 24(%rsi)
0x322: 62aa                 | 	andq %r10, %r10
0x324:                      | Foot6:
0x324: 50a71000000000000000 | 	mrmovq 16(%rdi), %r10
0x32e: 714103000000000000   | 	jle P7
0x337: c0f00100000000000000 | 	iaddq $1, %rax
0x341: 40a61000000000000000 | P7:	rmmovq %r10, 16(%rsi)
0x34b: 62aa                 | 	andq %r10, %r10
0x34d:                      | Foot7:
0x34d: 50a70800000000000000 | 	mrmovq 8(%rdi), %r10
0x357: 716a03000000000000   | 	jle P8
0x360: c0f00100000000000000 | 	iaddq $1, %rax
0x36a: 40a60800000000000000 | P8:	rmmovq %r10, 8(%rsi)	
0x374: 62aa                 | 	andq %r10, %r10
0x376:                      | Foot8:
0x376: 50a70000000000000000 | 	mrmovq (%rdi), %r10
0x380: 719303000000000000   | 	jle P9
0x389: c0f00100000000000000 | 	iaddq $1, %rax
0x393: 40a60000000000000000 | P9:	rmmovq %r10, (%rsi)		
0x39d: 62aa                 | 	andq %r10, %r10
0x39f: 71b203000000000000   | 	jle Done
0x3a8: c0f00100000000000000 | 	iaddq $1, %rax
                            | ##################################################################
                            | # Do not modify the following section of code
                            | # Function epilogue.
0x3b2:                      | Done:
0x3b2: 90                   | 	ret
                            | ##################################################################
                            | # Keep the following label at the end of your function
0x3b3:                      | End:
                            | #/* $end ncopy-ys */
0x3b3:                      | EndFun:
                            | 
                            | ###############################
                            | # Source and destination blocks 
                            | ###############################
0x3b8:                      | 	.align 8
0x3b8:                      | src:
0x3b8: 0100000000000000     | 	.quad 1
0x3c0: 0200000000000000     | 	.quad 2
0x3c8: fdffffffffffffff     | 	.quad -3
0x3d0: fcffffffffffffff     | 	.quad -4
0x3d8: fadebc0000000000     | 	.quad 0xbcdefa # This shouldn't get moved
                            | 
0x3e0:                      | 	.align 16
0x3e0:                      | Predest:
0x3e0: fadebc0000000000     | 	.quad 0xbcdefa
0x3e8:                      | dest:
0x3e8: abefcd0000000000     | 	.quad 0xcdefab
0x3f0: abefcd0000000000     | 	.quad 0xcdefab
0x3f8: abefcd0000000000     | 	.quad 0xcdefab
0x400: abefcd0000000000     | 	.quad 0xcdefab
0x408:                      | Postdest:
0x408: bcfade0000000000     | 	.quad 0xdefabc
                            | 
0x410:                      | .align 8
                            | # Run time stack
0x410: 0000000000000000     | 	.quad 0
0x418: 0000000000000000     | 	.quad 0
0x420: 0000000000000000     | 	.quad 0
0x428: 0000000000000000     | 	.quad 0
0x430: 0000000000000000     | 	.quad 0
0x438: 0000000000000000     | 	.quad 0
0x440: 0000000000000000     | 	.quad 0
0x448: 0000000000000000     | 	.quad 0
0x450: 0000000000000000     | 	.quad 0
0x458: 0000000000000000     | 	.quad 0
0x460: 0000000000000000     | 	.quad 0
0x468: 0000000000000000     | 	.quad 0
0x470: 0000000000000000     | 	.quad 0
0x478: 0000000000000000     | 	.quad 0
0x480: 0000000000000000     | 	.quad 0
0x488: 0000000000000000     | 	.quad 0
                            | 
0x490:                      | Stack:
